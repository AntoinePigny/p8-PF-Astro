---
import '../styles/global.css'

interface Props {
   title?: string | undefined
   description?: string | undefined
}

const { title = 'Antoine Pigny, Portfolio', description = "Le portfolio d'Antoine Pigny" } = Astro.props
---

<meta charset='UTF-8' />
<meta name='description' property='og:description' content={description} />
<meta name='viewport' content='width=device-width' />
<meta name='generator' content={Astro.generator} />
<title>{title}</title>

<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
<link rel='preconnect' href='https://fonts.googleapis.com' />
<link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
<link href='https://fonts.bunny.net/css?family=bodoni-moda:900|quattrocento-sans:400|taviraj:900' rel='stylesheet' />
<script is:inline>
// This code is inlined in the head to make dark mode instant & blocking.
const getThemePreference = () => {
	if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
		return localStorage.getItem('theme')
	}
	return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
}
const isDark = getThemePreference() === 'dark'
document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark')

if (typeof localStorage !== 'undefined') {
	// Watch the document element and persist user preference when it changes.
	const observer = new MutationObserver(() => {
		const isDark = document.documentElement.classList.contains('theme-dark')
		localStorage.setItem('theme', isDark ? 'dark' : 'light')
	})
	observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] })
}
</script>
